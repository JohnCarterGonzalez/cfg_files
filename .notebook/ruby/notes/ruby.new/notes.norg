@document.meta
    title: OOP and Ruby
    description: a brief overview of OOP and Ruby 
    author: John Carter Gonzalez
    categories: OOP, Ruby, Programming, Notes
    sources: \_Programming Ruby 3.2 by Dave Thomas and Noel Rappin_\
    created: 2023-06-03
@end
= TOC Table of Contents

* Ruby Is an OOP Lang
** Terms and Notations in Ruby 
   - In Ruby the word /object/ is often used interchangeably with /instance/
   - instances are created by calling a constructor
       - the standard constructor is called **new**:
          @code ruby 
               song1 = Song.new("Ruby Tuesday")
               song2 = Song.new("Python Fridays")
          @end
       - while these instances may share the same constructor, every obj has a unique object ID
       - you can define /instance variables/, vars with values that are unique to that instance
       - within each class you can define /instance methods/, a chunk of functionality that can be called within the 
         the context of the class 
       - these methods have access to the obj instance vars and to the objs state
       - syntactically you call these methods using the . syntax:
          @code ruby
              42.even?
              "rick".index("c")
              sam.play(song)
          @end

   - local vars, method params, and method names all start with a lowercase letter
   - global vars start with a "$", and instance vars start with a "@", class vars start with "@@"
   - class names, module names, and other consts start with a Uppercase letter
** Arrays and Hashes
   - You can create and init a new array using an /array literal/, a set of elements btw square brackets
       @code ruby
           a = [ 1, 'cat', 3,14 ] # notice the variety of primitives
       @end
   - a /hash literal/ has similar syntax, tho it uses {} rather than "[]", the literal must provide a key and a value
       @code ruby 
            instrument_section = { 
                "cello" => "string", 
                "clarinet" => "woodwind", 
                "drum" => "percussion", 
                "oboe" => "woodwind", 
                "trumpet" => "brass", 
                "violin" => "string"
            }
       @end
    - hashes are indexed using the same [ ] as arrays:
       @code ruby 
           p instrument_section["oboe"] # => "woodwind"\n"string" 
           p instrument_section["cello"] # => "string"\nnil
           p instrument_section["bassoon"] # => nil
       @end
** Symbols
    - Ruby Symbols are special strings that are immutable, created only once and very fast retrievals
    - A symbol literal starts with a colon and is followed by some kind of name:
       @code ruby 
           walk(:north) 
           look(:east)
       @end
    - Symbols are so frequently used as hash keys that Ruby has a shortcut syntax: 
     you can use name: value pairs to create a hash instead of name => value if the key is a symbol:
       @code ruby 
           instrument_section = {
           cello: "string", 
           clarinet: "woodwind", 
           drum: "percussion", 
           oboe: "woodwind", 
           trumpet: "brass", 
           violin: "string"
           }
       @end

** Control Structs
    - Ruby uses the keyword /end/ to signify the end of a body of control struct
        @code ruby 
            today = Time.now
            if today.saturday?
                puts "Do chores around the house"
            elsif today.sunday? 
                puts "Relax"
            else
                puts "Go to work" 
            end
        @end
    - Similarly, while statements are terminated with end and loop as long as the condition on the line with the while is true:
        @code ruby 
            num_pallets = 0
            weight = 0
            while weight < 100 && num_pallets <= 5
                pallet = next_pallet() 
                weight += pallet.weight 
                num_pallets += 1
            end
        @end
    - Ruby statement modifiers are a useful shortcut if the body of an if or while statement is just a single expression
        @code ruby 
            if radiation > 3000
                puts "Danger, Will Robinson"
            end
        @end
        can be more succintly written:
        @code ruby 
            puts "Danger Wil Robinson" if radiation > 3000
        @end
        can also be used on while loops
        @code ruby 
            square = 4 
            while square < 1000
                square =* square
            end
        @end
        becomes this:
        @code ruby 
            square = 4 
            square =* square while square < 1000
        @end
** Regex
    - A regular expression is simply a way of specifying a pattern of characters to be matched in a string
    - In Ruby, you typically create a regular expression by writing a pattern between slash characters (/pattern/)
    - a pattern that matches a string containing the text Ruby or the text Rust using the following regular expression:
        @code ruby 
            /Ruby|Rust/
        @end
    - The forward slashes delimit the pattern, which consists of the two things we are matching, separated by a pipe character (|). 
      In regular expressions, the pipe character means “either the thing on the right or the thing on the left
    - you can use parantheses within patterns to simplify the statement:
        @code ruby 
            /Ru(by|st)/
        @end
    - If the pattern is found in the string, =~ returns its starting position; otherwise, it returns nil. 
      This means you can use regular expressions as the condition in if and while statements
        @code ruby 
            line = gets
            if line.match?(/Ru(by|st)/)
                puts "Programming lang mentioned: #{line}"
            end
        @end
    - Both strings and regular expressions have a match? method which is synonymous to the =~ operator
    - The part of a string matched by a regular expression can be replaced with different text using one of Ruby’s substitution methods:
        @code ruby 
            line = gets 
            newline = line.sub(/Python/, 'Ruby') # replace first 'Python' with 'Ruby'
            newerline = line.gsub(/Python/, 'Ruby') # replace every 'Python' with 'Ruby'
            # You can replace mutiple items simultaneously
            newestline = line.gsub(/Javascript|Python/, 'Ruby')
        @end
** Blocks
   - A block is a chunk of code that you associate with a method call, as if that block were a parameter
   - Blocks are delimited by either curly braces ({}) or do and end
        @code ruby 
            foo.each { puts "Hello" }
        @end
   - Blocks can have multiple lines, just like methods
        @code ruby 
            foo.each do 
                puts "Hello"
                puts "Goodbye"
            end
       @end












































































